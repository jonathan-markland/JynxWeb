
JYNX WEB
--------

	[ ] C# Tests for the never-freeing memory allocator
	[ ] Translate never-freeing memory allocator to C++
	[ ] House never-freeing memory allocator in WASM spike context
	[ ] Add JynxFramework to WASM spike -- will need to sort out "operator new" / "placement new" issues.
	[ ] Proper heap allocator needed -- spike in the CsHeapManagerPrototype project.

	[X] Spike test the AutoWorkLet (128 samples at a time). -- C:\Users\Jonathan\Documents\Work\webaudio-examples\audioworklet
	[X] Spike test the bare metal WASM
	[X] Spike test data transfer to/from WASM memory space.
	[X] Spike test image in WASM space
	
	
Strategy for JynxFramework
--------------------------
	
	[ ] The JynxFramework main repo line is currently the (separate) Work/JynxFramework folder
	[ ] I am getting random stuff to compile against the new JynxFramework in the old Jynx folder (on a branch),
	    but Work/Jynx/Portable/ is NOT THE PRIMARY DEVELOPMENT LOCATION for the framework!


Strategy for WEB
----------------

No LibC.  Use JynxFramework instead, plus a possibly custom allocator.

When the audio handler is called

	- Do 128 samples worth of Z80 time  (11610 cycles @ 44,100Hz sample rate)
	- Check WASM's screen flags for need to queue a JS function to update screen.
	- Return the audio
	
Keyboard event (JS)

	- Maintain key flags in WASM memory space, on keyup/down.
	- No other actions required

Screen

	- Audio handler queues 'permission' to check.



WASM only (no emscripten)
=========================

	- Need Heap manager LibC
	- JynxFramework



References
==========

	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory

	https://emscripten.org/docs/porting/emscripten-runtime-environment.html#emscripten-runtime-environment

	https://depth-first.com/articles/2019/10/16/compiling-c-to-webassembly-and-running-it-without-emscripten/

	https://developers.google.com/web/updates/2018/06/audio-worklet-design-pattern

	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory
	
	https://stackoverflow.com/questions/65673325/best-way-to-call-wasm-module-functions-in-audioworkletprocessor
	
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module#sending_a_compiled_module_to_a_worker
	
	https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor
	
	https://developer.mozilla.org/en-US/docs/Web/API/crossOriginIsolated
	
			Examples
			Specifications
			Browser compatibility
			See also
			crossOriginIsolated
			Experimental: This is an experimental technology
			Check the Browser compatibility table carefully before using this in production.

			The global crossOriginIsolated read-only property returns a boolean value that indicates whether a SharedArrayBuffer can be sent via a Window.postMessage() call.

	https://blog.logrocket.com/understanding-sharedarraybuffer-and-cross-origin-isolation/
	
	https://docs.google.com/document/d/1zDlfvfTJ_9e8Jdc8ehuV4zMEu9ySMCiTGMS9y0GU92k/edit

	https://stackoverflow.com/questions/68609682/is-there-anyway-to-use-sharedarraybuffer-on-github-page/68675301#68675301
	https://github.com/gzuidhof/coi-serviceworker
	C:\Users\Jonathan\Documents\Work\Jynx\TechSpikes\COOP-COEP\coi-serviceworker\coi-serviceworker.js	
	
	https://tc39.es/ecma262/multipage/memory-model.html#sec-races
	
	
	
	